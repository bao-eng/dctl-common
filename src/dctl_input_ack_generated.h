// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DCTLINPUTACK_DCTL_FLAT_INPUT_ACK_H_
#define FLATBUFFERS_GENERATED_DCTLINPUTACK_DCTL_FLAT_INPUT_ACK_H_

#include "flatbuffers/flatbuffers.h"

namespace dctl {
namespace flat_input_ack {

struct InputAck;
struct InputAckBuilder;

struct InputAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef InputAckBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SEQUENCE = 4,
    VT_PLAYER_ID = 6
  };
  uint32_t sequence() const {
    return GetField<uint32_t>(VT_SEQUENCE, 0);
  }
  uint32_t player_id() const {
    return GetField<uint32_t>(VT_PLAYER_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SEQUENCE) &&
           VerifyField<uint32_t>(verifier, VT_PLAYER_ID) &&
           verifier.EndTable();
  }
};

struct InputAckBuilder {
  typedef InputAck Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sequence(uint32_t sequence) {
    fbb_.AddElement<uint32_t>(InputAck::VT_SEQUENCE, sequence, 0);
  }
  void add_player_id(uint32_t player_id) {
    fbb_.AddElement<uint32_t>(InputAck::VT_PLAYER_ID, player_id, 0);
  }
  explicit InputAckBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<InputAck> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<InputAck>(end);
    return o;
  }
};

inline flatbuffers::Offset<InputAck> CreateInputAck(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t sequence = 0,
    uint32_t player_id = 0) {
  InputAckBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  builder_.add_sequence(sequence);
  return builder_.Finish();
}

inline const dctl::flat_input_ack::InputAck *GetInputAck(const void *buf) {
  return flatbuffers::GetRoot<dctl::flat_input_ack::InputAck>(buf);
}

inline const dctl::flat_input_ack::InputAck *GetSizePrefixedInputAck(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<dctl::flat_input_ack::InputAck>(buf);
}

inline bool VerifyInputAckBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<dctl::flat_input_ack::InputAck>(nullptr);
}

inline bool VerifySizePrefixedInputAckBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<dctl::flat_input_ack::InputAck>(nullptr);
}

inline void FinishInputAckBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<dctl::flat_input_ack::InputAck> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedInputAckBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<dctl::flat_input_ack::InputAck> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flat_input_ack
}  // namespace dctl

#endif  // FLATBUFFERS_GENERATED_DCTLINPUTACK_DCTL_FLAT_INPUT_ACK_H_
