// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DCTLINPUT_DCTL_FLAT_INPUT_H_
#define FLATBUFFERS_GENERATED_DCTLINPUT_DCTL_FLAT_INPUT_H_

#include "flatbuffers/flatbuffers.h"

namespace dctl {
namespace flat_input {

struct Input;
struct InputBuilder;

struct Input FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef InputBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SEQUENCE = 4,
    VT_PLAYER_ID = 6,
    VT_LEFT = 8,
    VT_RIGHT = 10,
    VT_UP = 12,
    VT_DOWN = 14
  };
  uint32_t sequence() const {
    return GetField<uint32_t>(VT_SEQUENCE, 0);
  }
  uint32_t player_id() const {
    return GetField<uint32_t>(VT_PLAYER_ID, 0);
  }
  bool left() const {
    return GetField<uint8_t>(VT_LEFT, 0) != 0;
  }
  bool right() const {
    return GetField<uint8_t>(VT_RIGHT, 0) != 0;
  }
  bool up() const {
    return GetField<uint8_t>(VT_UP, 0) != 0;
  }
  bool down() const {
    return GetField<uint8_t>(VT_DOWN, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SEQUENCE) &&
           VerifyField<uint32_t>(verifier, VT_PLAYER_ID) &&
           VerifyField<uint8_t>(verifier, VT_LEFT) &&
           VerifyField<uint8_t>(verifier, VT_RIGHT) &&
           VerifyField<uint8_t>(verifier, VT_UP) &&
           VerifyField<uint8_t>(verifier, VT_DOWN) &&
           verifier.EndTable();
  }
};

struct InputBuilder {
  typedef Input Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sequence(uint32_t sequence) {
    fbb_.AddElement<uint32_t>(Input::VT_SEQUENCE, sequence, 0);
  }
  void add_player_id(uint32_t player_id) {
    fbb_.AddElement<uint32_t>(Input::VT_PLAYER_ID, player_id, 0);
  }
  void add_left(bool left) {
    fbb_.AddElement<uint8_t>(Input::VT_LEFT, static_cast<uint8_t>(left), 0);
  }
  void add_right(bool right) {
    fbb_.AddElement<uint8_t>(Input::VT_RIGHT, static_cast<uint8_t>(right), 0);
  }
  void add_up(bool up) {
    fbb_.AddElement<uint8_t>(Input::VT_UP, static_cast<uint8_t>(up), 0);
  }
  void add_down(bool down) {
    fbb_.AddElement<uint8_t>(Input::VT_DOWN, static_cast<uint8_t>(down), 0);
  }
  explicit InputBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Input> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Input>(end);
    return o;
  }
};

inline flatbuffers::Offset<Input> CreateInput(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t sequence = 0,
    uint32_t player_id = 0,
    bool left = false,
    bool right = false,
    bool up = false,
    bool down = false) {
  InputBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  builder_.add_sequence(sequence);
  builder_.add_down(down);
  builder_.add_up(up);
  builder_.add_right(right);
  builder_.add_left(left);
  return builder_.Finish();
}

inline const dctl::flat_input::Input *GetInput(const void *buf) {
  return flatbuffers::GetRoot<dctl::flat_input::Input>(buf);
}

inline const dctl::flat_input::Input *GetSizePrefixedInput(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<dctl::flat_input::Input>(buf);
}

inline const char *InputIdentifier() {
  return "INP_";
}

inline bool InputBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, InputIdentifier());
}

inline bool VerifyInputBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<dctl::flat_input::Input>(InputIdentifier());
}

inline bool VerifySizePrefixedInputBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<dctl::flat_input::Input>(InputIdentifier());
}

inline const char *InputExtension() {
  return "inp";
}

inline void FinishInputBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<dctl::flat_input::Input> root) {
  fbb.Finish(root, InputIdentifier());
}

inline void FinishSizePrefixedInputBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<dctl::flat_input::Input> root) {
  fbb.FinishSizePrefixed(root, InputIdentifier());
}

}  // namespace flat_input
}  // namespace dctl

#endif  // FLATBUFFERS_GENERATED_DCTLINPUT_DCTL_FLAT_INPUT_H_
