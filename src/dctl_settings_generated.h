// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DCTLSETTINGS_DCTL_FLAT_SETTINGS_H_
#define FLATBUFFERS_GENERATED_DCTLSETTINGS_DCTL_FLAT_SETTINGS_H_

#include "flatbuffers/flatbuffers.h"

namespace dctl {
namespace flat_settings {

struct Settings;
struct SettingsBuilder;

struct Settings FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SettingsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAX_CLIENTS = 4,
    VT_MAP_WIDTH = 6,
    VT_MAP_HEIGHT = 8,
    VT_SPEED = 10,
    VT_DT = 12,
    VT_MAX_LENGTH = 14,
    VT_HEAD_DIAMETER = 16,
    VT_TAIL_WIDTH = 18
  };
  uint32_t max_clients() const {
    return GetField<uint32_t>(VT_MAX_CLIENTS, 0);
  }
  float map_width() const {
    return GetField<float>(VT_MAP_WIDTH, 0.0f);
  }
  float map_height() const {
    return GetField<float>(VT_MAP_HEIGHT, 0.0f);
  }
  float speed() const {
    return GetField<float>(VT_SPEED, 0.0f);
  }
  double dt() const {
    return GetField<double>(VT_DT, 0.0);
  }
  uint32_t max_length() const {
    return GetField<uint32_t>(VT_MAX_LENGTH, 0);
  }
  float head_diameter() const {
    return GetField<float>(VT_HEAD_DIAMETER, 0.0f);
  }
  float tail_width() const {
    return GetField<float>(VT_TAIL_WIDTH, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_MAX_CLIENTS) &&
           VerifyField<float>(verifier, VT_MAP_WIDTH) &&
           VerifyField<float>(verifier, VT_MAP_HEIGHT) &&
           VerifyField<float>(verifier, VT_SPEED) &&
           VerifyField<double>(verifier, VT_DT) &&
           VerifyField<uint32_t>(verifier, VT_MAX_LENGTH) &&
           VerifyField<float>(verifier, VT_HEAD_DIAMETER) &&
           VerifyField<float>(verifier, VT_TAIL_WIDTH) &&
           verifier.EndTable();
  }
};

struct SettingsBuilder {
  typedef Settings Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_max_clients(uint32_t max_clients) {
    fbb_.AddElement<uint32_t>(Settings::VT_MAX_CLIENTS, max_clients, 0);
  }
  void add_map_width(float map_width) {
    fbb_.AddElement<float>(Settings::VT_MAP_WIDTH, map_width, 0.0f);
  }
  void add_map_height(float map_height) {
    fbb_.AddElement<float>(Settings::VT_MAP_HEIGHT, map_height, 0.0f);
  }
  void add_speed(float speed) {
    fbb_.AddElement<float>(Settings::VT_SPEED, speed, 0.0f);
  }
  void add_dt(double dt) {
    fbb_.AddElement<double>(Settings::VT_DT, dt, 0.0);
  }
  void add_max_length(uint32_t max_length) {
    fbb_.AddElement<uint32_t>(Settings::VT_MAX_LENGTH, max_length, 0);
  }
  void add_head_diameter(float head_diameter) {
    fbb_.AddElement<float>(Settings::VT_HEAD_DIAMETER, head_diameter, 0.0f);
  }
  void add_tail_width(float tail_width) {
    fbb_.AddElement<float>(Settings::VT_TAIL_WIDTH, tail_width, 0.0f);
  }
  explicit SettingsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Settings> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Settings>(end);
    return o;
  }
};

inline flatbuffers::Offset<Settings> CreateSettings(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t max_clients = 0,
    float map_width = 0.0f,
    float map_height = 0.0f,
    float speed = 0.0f,
    double dt = 0.0,
    uint32_t max_length = 0,
    float head_diameter = 0.0f,
    float tail_width = 0.0f) {
  SettingsBuilder builder_(_fbb);
  builder_.add_dt(dt);
  builder_.add_tail_width(tail_width);
  builder_.add_head_diameter(head_diameter);
  builder_.add_max_length(max_length);
  builder_.add_speed(speed);
  builder_.add_map_height(map_height);
  builder_.add_map_width(map_width);
  builder_.add_max_clients(max_clients);
  return builder_.Finish();
}

inline const dctl::flat_settings::Settings *GetSettings(const void *buf) {
  return flatbuffers::GetRoot<dctl::flat_settings::Settings>(buf);
}

inline const dctl::flat_settings::Settings *GetSizePrefixedSettings(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<dctl::flat_settings::Settings>(buf);
}

inline const char *SettingsIdentifier() {
  return "SETT";
}

inline bool SettingsBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, SettingsIdentifier());
}

inline bool VerifySettingsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<dctl::flat_settings::Settings>(SettingsIdentifier());
}

inline bool VerifySizePrefixedSettingsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<dctl::flat_settings::Settings>(SettingsIdentifier());
}

inline const char *SettingsExtension() {
  return "sett";
}

inline void FinishSettingsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<dctl::flat_settings::Settings> root) {
  fbb.Finish(root, SettingsIdentifier());
}

inline void FinishSizePrefixedSettingsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<dctl::flat_settings::Settings> root) {
  fbb.FinishSizePrefixed(root, SettingsIdentifier());
}

}  // namespace flat_settings
}  // namespace dctl

#endif  // FLATBUFFERS_GENERATED_DCTLSETTINGS_DCTL_FLAT_SETTINGS_H_
